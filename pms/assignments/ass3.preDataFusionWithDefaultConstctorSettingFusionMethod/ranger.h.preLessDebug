#ifndef RANGER_H_
#define RANGER_H_


//
// Base Sensor class called Ranger.
//
// Class declaration/definition/interface???
//
//
#include <vector>
#include <string>
#include <unistd.h>


using namespace std; // allow use as std::


/*!
 *  \ingroup   ac_shapre Ranger
 *  \brief     Class Ranger
 *  \details
 *  This class is the abstract base class Ranger.\n
 *  \author    Simone Magri
 *  \version   1.0
 *  \date      2017
 *  \pre       none
 *  \bug       none
 *  \warning   
 */


class Ranger{

 public:

  // Accessable to all classes.
  Ranger();
  
  
  // Connecting to the sensor member fns, all sensors require these.
  //void setConnectnModel(string model);
  void setConnectnBaud(int baud);
  void setConnectnPort(string port);
  
  // Getting hardware specific fixed parameters of the sensor.
  double getHdwFixedFOV(void);
  double getHdwFixedRangeMin(void);
  double getHdwFixedRangeMax(void);
  int getHdwFixedNumSamples(void);
  int getHdwFixedSamplingRate(void);
  double getHdwFixedSensorResolution(void);

  // Other getter fns.
  //vector<double> getRawData(void);
  string getConnectnModel(void);
  int getConnectnBaud(void);
  string getConnectnPort(void);

  // Other setter fns.
  //void setFusionMethod(string fusionMethod);
  
  // Set configurable parameters of the sensor.
  //void setConfigResolution(double resolution);

  // Virtual fns  are overriden  in the  derived classes  that inherit
  // from  this class.   Making fn  = 0  implies that  this is  a pure
  // virtual function and makes this  class an abstract class.  For an
  // abstract class  it implies  that no  object can  be made  of this
  // class.
  //
  /// Pure virtual function that makes the Ranger base class an abstract class.
  virtual void setConfigFOV(double fov) = 0;
  //
  //virtual int setConfigAngularRes(double angularRes) = 0;
  int readRanger(vector<double> &rawData_, int samplingRate, int numSamples_);
  //
  vector<double> getRawData(void);
  void clearRawData(void);


  //vector<double> rawData_;
  
 protected:

  // Accessable to the base class and the derived classes.

  // Sensor/Ranger protected members:
  //
  string model_; ///< model name of sensor/ranger
  int baud_;	 ///< baud rate of sensor/ranger
  string port_;  ///< serial/usb port of sensor/ranger
  
  double fov_;      ///< Field Of View of sensor/ranger
  double rangeMin_; ///< Minimum Range of sensor/ranger
  double rangeMax_; ///< Maximum Range of sensor/ranger

  int numSamples_; ///< number of samples generated by sensor/ranger

  int sensorRes_; ///< resolution of the sensor/ranger

  int samplingRate_; ///< sampling rate of sensor/ranger
  
  vector<double> rawData_; ///< raw sampled data for each sensor/ranger
  

  // private: Accessable only to member fns of this class.
};


#endif // RANGER_H_
