[16.4] Why should I use new instead of trustworthy old malloc()?

Use malloc  and free only  for allocating memory  that is going  to be
managed by c-centric  libraries and APIs. Use new and  delete (and the
[] variants) for everything that you control.



new vs malloc()

1) new is an operator, while malloc() is a function.

2) new calls constructors, while malloc() does not.

3) new returns exact data type, while malloc() returns void *.

4) new never returns a NULL (will throw on failure) while malloc()
returns NULL

5) Reallocation of memory not handled by new while malloc() can



There is one  big difference between malloc and  new. malloc allocates
memory. This  is fine  for C,  because in C,  a lump  of memory  is an
object.

In C++, if you're  not dealing with POD types (which  are similar to C
types) you  must call a constructor  on a memory location  to actually
have an  object there. Non-POD types  are very common in  C++, as many
C++ features make an object automatically non-POD.

new  allocates   memory  and   creates  an   object  on   that  memory
location. For non-POD types this means calling a constructor.



C VERSION:

int *array;
array=(int *) malloc(size*sizeof(int));

C++ VERSION:

int *array;
array=new int[size]

NOTICE: Since  this data is  pushed on the  stack, not the  segment, a
possibility of MEMORY  LEAKS occurs. Memory leaks  are where allocated
memory  is not  freed before  the  program returns.   For example,  to
safely deallocate the array just created (and normally return from the
program):

C VERSION:

free(array);

C++ VERSION:

delete [] array




When  new is  used to  allocate  memory for  a C++  class object,  the
object's constructor is called after  the memory is allocated. Use the
delete  operator  to deallocate  the  memory  allocated with  the  new
operator.   The   following  example   allocates  and  then   frees  a
two-dimensional array of characters of size dim by 10.



C++ dynamic memory allocation: see www.cplusplus.com

In  the programs  seen in  previous  chapters, all  memory needs  were
determined  before   program  execution  by  defining   the  variables
needed. But there may be cases where the memory needs of a program can
only be determined during runtime. For example, when the memory needed
depends on  user input. On  these cases, programs need  to dynamically
allocate memory, for  which the C++ language  integrates the operators
new and delete.

Thus in main use argv[] to pass the program variables, say array sizes.
int main(int argc, char *argv[]){
...
...
...
}


c++ new operator:

Dynamic memory is  allocated using operator new. new is  followed by a
data type  specifier and, if  a sequence of  more than one  element is
required, the number of these within brackets []. It returns a pointer
to the beginning of the new block of memory allocated. Its syntax is:

pointer = new type
pointer = new type [number_of_elements] // arrray of type 'type'

The first expression is used to  allocate memory to contain one single
element of type type.  The second one is used to  allocate a block (an
array)  of  elements of  type  type,  where number_of_elements  is  an
integer value representing the amount of these. For example:

int * foo;
foo = new int [5]; // array of type ints

Here, foo is a pointer, and thus,  the first element pointed to by foo
can be  accessed either with  the expression foo[0] or  the expression
*foo (both are equivalent). The  second element can be accessed either
with foo[1] or *(foo+1), and so on...

There is a substantial difference between declaring a normal array and
allocating dynamic  memory for a block  of memory using new.  The most
important difference is that the size of a regular array needs to be a
constant expression,  and thus its  size has  to be determined  at the
moment of designing the program, before it is run, whereas the dynamic
memory  allocation performed  by new  allows to  assign memory  during
runtime using any variable value as size.

The dynamic memory requested by our program is allocated by the system
from the memory heap. However,  computer memory is a limited resource,
and it can  be exhausted. Therefore, there are no  guarantees that all
requests to allocate memory using operator new are going to be granted
by the system.


***chat with  r2: heap is in  the virtual memory space  of a processs,
   can always allocate more heap memory from swap space if you have it.

In  most cases,  memory allocated  dynamically is  only needed  during
specific  periods of  time  within a  program; once  it  is no  longer
needed, it can be freed so that the memory becomes available again for
other  requests of  dynamic memory.  This is  the purpose  of operator
delete, whose syntax is:

delete pointer;
delete[] pointer;

The first statement releases the  memory of a single element allocated
using new, and the second one releases the memory allocated for arrays
of elements using new and a size in brackets ([]).

The value passed as argument to delete  shall be either a pointer to a
memory block previously allocated with new,  or a null pointer (in the
case of a null pointer, delete produces no effect).

There always exists  the possibility that the user  introduces a value
for i so big that the system cannot allocate enough memory for it. For
example, when I  tried to give a  value of 1 billion to  the "How many
numbers" question, my  system could not allocate that  much memory for
the program,  and I  got the  text message we  prepared for  this case
(Error: memory could not be allocated)

It  is considered  good practice  for programs  to always  be able  to
handle failures  to allocate  memory, either  by checking  the pointer
value (if nothrow) or by catching the proper exception.

Dynamic memory in C
C++ integrates  the operators  new and  delete for  allocating dynamic
memory. But  these were not available  in the C language;  instead, it
used a  library solution, with  the functions malloc,  calloc, realloc
and  free, defined  in the  header <cstdlib>  (known as  <stdlib.h> in
C). The functions  are also available in  C++ and can also  be used to
allocate and deallocate dynamic memory.

Note, though, that the memory  blocks allocated by these functions are
not necessarily compatible with those  returned by new, so they should
not be mixed; each one should be handled with its own set of functions
or operators.

http://www.cplusplus.com/doc/tutorial/dynamic/ has a really really
good example of this, similar to the tutorial, this is saved in the
docs/c++ directory as: Dynamic memory - C++ Tutorials.pdf.


