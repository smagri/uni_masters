#include <cstdio>
#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <mutex>
#include <thread>

#include "DataFusionInterface.h"
#include "dataFusion.h"
#include "ranger.h"


 
DataFusion::DataFusion(){

  // Default contructor,  expected to be called  after constructors of
  // classes that derive from the DataFusion class are executed.
  
}


void DataFusion::setFusionMethod(string fusionMethod){
  
  /// Fusion method min/max/average is specified by the user.

  if( (fusionMethod != "min") && (fusionMethod != "max")
      && (fusionMethod != "avg") ){
    
    fprintf(stderr, " Error: invalid fusionMethod name entered,");
    fprintf(stderr, " defaulting to, min.\n");
    
    fusionMethod_ = "min"; // set default fusionMethod_ value
    
  }
  else{
    fusionMethod_ = fusionMethod;
  }
  
  fprintf(stderr, "\ndbg: fusionMethod_=%s\n", fusionMethod_.c_str());
  
  return;
  
}

string DataFusion::getFusionMethod(void){

  return fusionMethod_;

}

void DataFusion::setRangers(vector<Ranger *> rangers){
  
  /// Accepts a vector of rangers,  or pointers to objects derived from
  /// class  Ranger,  indicating   a  particular  sensor(laser,  radar,
  /// sonar...).
  //

  rangers_ = rangers;
  
  cout << "dbg: setRangers: rangers_ :" << endl << endl;
  //
  //cout << "&l1=" << rangers_.at(0) << endl;
  cout << "dbg: setRangers: &r1=" << rangers_.at(0) << endl;
  cout << "dbg: setRangers: &s1=" << rangers_.at(1) << endl;

  cout << "rangers :" << endl << endl;
  //
  //cout << "&l1=" << rangers.at(0) << endl;
  cout << "dbg: setRangers: &r1=" << rangers.at(0) << endl;
  cout << "dbg: setRangers: &s1=" << rangers.at(1) << endl;

  cout << "dbg: setRangers: rangers_.size()=" << rangers_.size() << endl;

}


vector<double> DataFusion::getFusedRangeData(){

  /// This function uses the  Ranger Class readRanger() member function
  /// to read data from the sensor,  this is the 'raw' sensor data.  It
  /// then performs an algorithm on this  data to produce fused data as
  /// detailed within this function.

  cout << "dbg: DataFusion::getFusedRangeData()" << endl;
  
  //vector<double> fusedRangeData; // fused sensor data

  double minFOV, maxFOV; // minimum and maximum of the sensor FOVs
  double overlapMinFOV; // lower limit of overlapping FOVs, degrees
  double overlapMaxFOV; // upper limit of overlapping FOVs, degrees
  
  double minRANGE, maxRANGE; // minimum and maximum of the sensor Range
  //int numRangerSamples; // number of samples for a particular ranger
  

  // This function uses the  Ranger Class readRanger() member function
  // to generate  the 'raw' sampled  data of the  sensors/rangers.  It
  // then   places   this   data    into   the   class   member   data
  // readRawRangeDataVV_.  This is the raw  data that this method will
  // use for fusion processing.
  //
  readRangeData();


  // Fusion algorithim:
  //
  //
  // Work out the FOV overlap and the Range overlap of sensors.
  //
  // All sensors have the same rangeMin_ value so only rangeMax_
  // will be considered.
  //
  // At this stage only the fusionMethod=average is implemented.
  //
  
  // Overlapping FOV range/region should be between minFOV and maxFOV.
  //
  // determine minimum of the FOV range
  double previousFOVmin = rangers_.at(0)->getHdwFixedFOV();
  int minFOVindex = 0;
  //
  for (int i=1; i<rangers_.size(); i++){
    
    minFOV = min(previousFOVmin, rangers_.at(i)->getHdwFixedFOV());
    
    if (minFOV < previousFOVmin){
      previousFOVmin = minFOV;
      minFOVindex = i;
    }	
  }

  // determine maximum of the FOV range
  double previousFOVmax = rangers_.at(0)->getHdwFixedFOV();
  int maxFOVindex = 0;
  //
  for (int i=1; i<rangers_.size(); i++){
    
    maxFOV = max(previousFOVmax, rangers_.at(i)->getHdwFixedFOV());
    
    if (maxFOV > previousFOVmax){
      previousFOVmax = maxFOV;
      maxFOVindex = i;
    }	
  }
  
  overlapMinFOV = 90 - minFOV/2;
  overlapMaxFOV = 90 + minFOV/2;

  fprintf(stderr, "dbg: getFusedRangeData: minFOV=%f\n", minFOV);
  fprintf(stderr, "dbg: getFusedRangeData: maxFOV=%f\n", maxFOV);
  fprintf(stderr, "dbg: getFusedRangeData: overlapMinFOV=%f\n", overlapMinFOV);
  fprintf(stderr, "dbg: getFusedRangeData: overlapMaxFOV=%f\n", overlapMaxFOV);
  

  // Overlapping Range should be between minRange and maxRange.
  //
  // determine minimum of the sensor ranges.
  double previousRANGEmin = rangers_.at(0)->getHdwFixedRangeMin();
  int minRANGEindex = 0;
  //
  for (int i=1; i<rangers_.size(); i++){
    
    minRANGE = min(previousRANGEmin, rangers_.at(i)->getHdwFixedRangeMin());
    
    if (minRANGE < previousRANGEmin){
      previousRANGEmin = minRANGE;
      minRANGEindex = i;
    }	
  }
    // determine the maximum of the sensor ranges.
  double previousRANGEmax = rangers_.at(0)->getHdwFixedRangeMax();
  int maxRANGEindex = 0;
  //
  for (int i=1; i<rangers_.size(); i++){
    
          maxRANGE = max(previousRANGEmax, rangers_.at(i)->getHdwFixedRangeMax());
    
    if (maxRANGE > previousRANGEmax){
      previousRANGEmax = maxRANGE;
      maxRANGEindex = i;
    }	
  }
  
  fprintf(stderr, "dbg: getFusedRangeData: minRANGE=%f\n", minRANGE);
  fprintf(stderr, "dbg: getFusedRangeData: maxRANGE=%f\n", maxRANGE);

  
  // LATER: write introduction to this secton.
  //
  // The sampled  data from each  Ranger/Sensor is  put into a  row of
  // curFusionVec, the current ranger fusion vector, or the samples of
  // the current ranger/sensor being processed.
  //
  // That is, each row of the rawRangeDataVV_ is extracted into a
  // curFusionVec row..

  // Each ranger's sampled data is a row of curFusionVec.
  vector<vector<double> > curFusionVec;

  // Number of samples for a particular ranger/sensor.
  int numRangerSamples[rangers_.size()];

  for (int i=0; i<rangers_.size(); i++){
    // Foreach Ranger/Sensor.

    // Add an empty row to curFusionVec.
    curFusionVec.push_back( vector<double>() );

    numRangerSamples[i] = rangers_.at(i)->getHdwFixedNumSamples();
    fprintf(stderr, "dbg: getFusedRangeData: numRangerSamples=%d\n",
	    numRangerSamples[i]);

    // Fill this empty row with rawRangeDataVV_ values.
    for (int j=0; j<numRangerSamples[i]; j++){
      curFusionVec[i].push_back(rawRangeDataVV_[i][j]);
    }
    
  }
  // Output contents of curFusionVec to see if it filled properly.
  for (int i=0; i<rangers_.size(); i++){
    for (int j=0; j<numRangerSamples[i]; j++){
      cout << "dbg: getFusedRangeData: curFusionVec[" << i << "]"
	   << "[" << j << "]="
	   << curFusionVec[i][j] <<endl;
    }
  }


  // The maximum  number of fused  values to be determined  depends on
  // the  angular  resolution of  the  densest  ranger/sensor.  So  we
  // determine  the largest  sensor sample  vector out  of all  of our
  // rangers/sensors.
  //
  // int preNumValues2fuse = numRangerSamples[0];
  // OR
  // Does implicit cast here, as  curFusionVec[0].size() is a long int value.


  // The number of samples in a larget sensor data vector of the
  // sensors we are dealing with.
  int numValues2fuse;

   // The row index of the largest sensor sampled vector.
  int numValues2fuseIndex = 0;
   
  int preNumValues2fuse = curFusionVec[0].size();
  //
  for (int i=1; i<rangers_.size(); i++){
    
    numValues2fuse = max(preNumValues2fuse, numRangerSamples[i]);
    
    if (numValues2fuse > preNumValues2fuse){
       preNumValues2fuse = numValues2fuse;
       numValues2fuseIndex = i;
    }	
  }
  fprintf(stderr, "dbg: getFusedRangeData: "
	  "numValues2fuse=%d, this size belongs to sensor number %d.\n",
	  numValues2fuse, numValues2fuseIndex);

  preNumValues2fuse = numRangerSamples[0];
  numValues2fuse;
  numValues2fuseIndex = 0;
  //
  for (int i=1; i<rangers_.size(); i++){
    
    numValues2fuse = max(preNumValues2fuse, (int)curFusionVec[i].size());
    
    if (numValues2fuse > preNumValues2fuse){
       preNumValues2fuse = numValues2fuse;
       numValues2fuseIndex = i;
    }	
  }
  fprintf(stderr, "dbg: getFusedRangeData: "
	  "numValues2fuse=%d, this size belongs to sensor number %d.\n",
	  numValues2fuse, numValues2fuseIndex);




  // Find the angles that correspond to the samples in the largest
  // sensor sample vector found.
  //
  double angle[numValues2fuse];
  double sensorRes
    = rangers_.at(numValues2fuseIndex)->getHdwFixedSensorResolution();
  // sensorRes = rangers_.at(numValues2fuseIndex)->getConfigAngularRes();
  // sensorRes = rangers_.at(0)->getHdwFixedSensorResolution();
  // double sensorRes = 30;
  fprintf(stderr, "dbg: getFusedRangeData: Sensor Resolution for fusion=%f\n",
	  sensorRes);
  
  vector<double> fusionAngle; // angles of the fusedRangeData vector

  for (int i=0; i<numValues2fuse; i++){
    fusionAngle.push_back(sensorRes * i);
    cout << "dbg: getFusedRangeData: fusionAngle[" << i << "]="
	 << fusionAngle[i] << endl;
  }

  // Test  if each  of  the fusion  angles  are within  the  FOV of  a
  // particular sensor.   If so flag this  so as we know  which sensor
  // value/s to apply the fusion method to.
  //
  // LATER: implement check for and overlapping distance Range also.
  //
  //
  vector<vector<int> > fusionAngleFlag;

  // curFOV... refers to the FOV of the current sensor/ranger being processed.
  double curFOV;
  double curFOVmin;
  double curFOVmax;
  
  for (int i=0; i<rangers_.size(); i++){

    // Add an empty row to fusionAngleFlag
    fusionAngleFlag.push_back( vector<int>() );
    
    // FOV of ranger i.
    curFOV = rangers_.at(i)->getHdwFixedFOV(); 
    curFOVmax = 90 + curFOV/2;
    curFOVmin = 90 - curFOV/2;

    // Fill the empty rows for fusionAngleFlag
    for (int j=0; j<fusionAngle.size(); j++){
      
      if ( (fusionAngle[j] >= curFOVmin) && (fusionAngle[j] <= curFOVmax) ){
	fusionAngleFlag[i].push_back(1); // sample included in fusion
      }
      else{
	fusionAngleFlag[i].push_back(0); // sample not included in fusion
      }
      
    }
  }
  // Output contents of fusionAngleFlag to see if it filled properly.
  for (int i=0; i<rangers_.size(); i++){
    for (int j=0; j<fusionAngle.size(); j++){
      cout << "dbg: getFusedRangeData: fusionAngleFlag[" << i << "]"
           << "[" << j << "]="
           << fusionAngleFlag[i][j] <<endl;
    }
  }


  
  //  We have all the information to determine our final fused data
  //  vector.
  //
  vector<double> fusedRangeData; // vector of fused data

  // To date only fusionMethod_=average has been implemented.
  //
  //
  // Number of values to average per fusion data element.
  int numValuesInAverage = 0;
  int average = 0; // actual value of the average

  // Index of the next element of data for a particular sensor.
  int index[rangers_.size()];
  int curIndex = 0; // current value of index
  
  fprintf(stderr, "dbg: getFusedRangeData: fusionMethod_=%s\n",
	  fusionMethod_.c_str());

  if (fusionMethod_ == "min"){
    // LATER: implement
  }
  else if(fusionMethod_ == "max"){
    // LATER: implement
  }
  else if(fusionMethod_ == "average"){

    for (int i=0; i<rangers_.size(); i++){
      index[i] = 0;
    }
    curIndex = 0;
    
    for (int j=0; j<fusionAngle.size(); j++){
      numValuesInAverage = 0;
      average = 0;
      
      for (int i=0; i<rangers_.size(); i++){
	
	if (fusionAngleFlag[i][j] == 1){
	  
	  curIndex = index[i]; // sensor/ranger data value number
	  
	  if (curIndex >= curFusionVec[i].size()){
	    curIndex = (curFusionVec[i].size() - 1);
	  }
	  
	  average += curFusionVec[i][curIndex]; // include in average
	
	  numValuesInAverage++;
	  index[i] = ++curIndex;
	  
	}
      }

      fusedRangeData.push_back(average); // fused data vector
      
    } // for (int j=0; j<fusionAngle.size(); j++){ 

  } // else if(fusionMethod_ == "average"){

  // Output fusedRangeData contents.
  for (int i=0; i<fusedRangeData.size(); i++){
    cout << "dbg: getFusedRangeData: fusedRangeData(" << i << ")="
	 << fusedRangeData.at(i) << endl;
  }
  
  return fusedRangeData;
}


vector<vector<double> > DataFusion::getRawRangeData(){

  /// This function returns a _set_  of vectors, each vector containing
  /// a set  of double  values, the sensor  sampled values.   Again the
  /// 'raw' sampled  sensor values  are derived from  a call  to Ranger
  /// Class  readRanger()   from  within  the   readRangeData()  member
  /// function.  The  number of  returned vectors  is derived  from the
  /// number  of pointers  in rangers_  vector, that  is the  number of
  /// sensors we are dealing with.
  
  return rawRangeDataVV_;
}


int DataFusion::readRangeData(){
  
  /// This function generates class  member data rawRangeDataVV_ within
  /// to provide the data for fusion in getFusedRangeData().

  // rawRangeDataVV_  contains   a  _set_  of  vectors,   each  vector
  // containing a  set of  double values,  the sensor  sampled values.
  // Again the 'raw' sampled sensor values  are derived from a call to
  // Ranger  Class  readRanger()  member   function.   The  number  of
  // returned  vectors  is derived  from  the  number of  pointers  in
  // rangers_ vector,  that is  the number of  sensors we  are dealing
  // with.

  
  // Note: standard says you must have a space between the last two
  // angle brackets in vector<vector<double> >.
  
  vector<double> rawRangeData;
  int rawRangeDataVecSize;
  int numRangerSamples; // number of samples for each sensor
  int samplingRate;
    
  //vector<vector<double> > rawRangeDataVV_; // raw range data Vector of Vectors

  
  
  for (int i=0; i<rangers_.size(); i++){
    
    numRangerSamples = rangers_.at(i)->getHdwFixedNumSamples();
    samplingRate = rangers_.at(i)->getHdwFixedSamplingRate();
    //
    // Read the ranger's/senor's data.
    //
    rangers_.at(i)->readRanger(rawRangeData, samplingRate, numRangerSamples);
    
    // Add an empty row.
    rawRangeDataVV_.push_back( vector<double>() );
    
    // File this row with the raw range data.
    for (int j=0; j<rawRangeData.size(); j++){
      rawRangeDataVV_[i].push_back(rawRangeData[j]);
    }
    rawRangeDataVecSize = rawRangeData.size(); // need to save for later
    
    // Need to clear rawRangeData vector, ready for next readRanger()
    // invocation.  Otherwise this vector grows infinatly with each
    // invocation.
    //
    // itterate the raw data vector backwards.
    //
    // However, could use rbegin() and rend() vector methods, it works
    // accross all containers.
    //
    // Containers and itterators, it acts like a pointer.
    //
    // NOTE: maybe use vector::clear() here instead, found it too late???
    //
    vector<double>::iterator it;
    vector<double>::iterator itbegin = rawRangeData.begin();
    vector<double>::iterator itend = rawRangeData.end()-1;
    
    for(vector<double>::iterator it=itend; it>=itbegin; --it){
      // pops last element in vector off the list
      cout<<"dbg: readRangeData: rawRangeData("
	  <<  (it-itbegin) << ")=" << *it << endl;
      rawRangeData.pop_back();
    }

    
    
  } // for (int i=0; i<rangers_.size(); i++){
  

  // Check output.
  fprintf(stderr, "dbg: readRangeData: rawRangeDataVV_[m][n]:\n");
  for (int m=0; m<rangers_.size(); m++){
    for (int n=0; n<rawRangeDataVecSize; n++){
      cout << "dbg: readRangeData: rawRangeDataVV_["
	   << m << "]" << "[" << n << "]="
	   << rawRangeDataVV_[m][n] <<endl;
    }
  }
  fprintf(stderr, "dbg: readRangeData: before return.\n");
  

  //return rawRangeDataVV_;
  return 0;
}



// Threaded processing of sensor/ranger data.
//
// void DataFusion::fillBuffer(DataBuffer &dataBuff, int rangerNum){

//   /// Fill FIFO buffer of a given sensor.

//   int numSamples;
//   int samplingRate;

//   //dataBuff.buffMutex_.lock();

//   // vector<double> rawRangeData; ??? any of this stuff at all
  
//   numSamples = rangers_.at(rangerNum)->getHdwFixedNumSamples();
//   t samplingRate = rangers_.at(rangerNum)->getHdwFixedSamplingRate();
  
//   // Read the ranger's/senor's data.
//   //
//   // rangers_.at(i)->readRanger(rawRangeData, samplingRate, numRangerSamples);

//   // dataBuff.buffQue_.push();

//   // dataBuff.buffMutex_.unlock();

  
//   // This delay slows the loop down for the sake of readability,
//   // notice it's not within the mutex lock.
//   // std::this_thread::sleep_for(std::chrono::milliseconds(1000));
  
// }


// void DataFusion::processBuffer(){

//   /// Procees the buffered sensor data.
  
// }
