// simple-inheritance.cpp by Bill Weinman <http://bw.org/>
#include <cstdio>
#include <string>
using namespace std;

// Sometimes  you may  want to  grant  access to  your class'  private
// variables  to  another   specific  class  or  even   a  few  select
// classes. This is accomplished with a friend declaration


// Base class
class Animal {
    string _name;
    string _type;
    string _sound;
    // private constructor prevents construction of base class
  Animal(){};
  // friends make the above Animal constructor work for them, thus
  // these classess, dog cat pick can created objects of type Animal
  // now.
  //
  // So the friend declaration allows you to grant private member
  // access to other classes and functions. And this can be handy
  // sometimes and it may even be necessary at times, but try to avoid
  // them to be in the spirit of oo in c++.
  //
  // can apply friends to fns too.
  // friend class Dog;
  // friend class Cat;
  // friend class Pig;
  // friend const string & get_animal_name(const Animal &);
protected:
  // protected constructor for use by derived classes
  Animal ( const string & n, const string & t, const string & s )
    : _name(n), _type(t), _sound(s) {}
  
public:
    void speak() const;
    const string & name() const { return _name; }
    const string & type() const { return _type; }
    const string & sound() const { return _sound; }
};

void Animal::speak() const {
    printf("%s the %s says %s\n", _name.c_str(), _type.c_str(), _sound.c_str());
}

// Dog class - derived from Animal
class Dog : public Animal {
    int walked;
public:
    Dog( string n ) : Animal(n, "dog", "woof"), walked(0) {};
    int walk() { return ++walked; }
};

// Cat class - derived from Animal
class Cat : public Animal {
    int petted;
public:
    Cat( string n ) : Animal(n, "cat", "meow"), petted(0) {};
    int pet() { return ++petted; }
};

// Pig class - derived from Animal
class Pig : public Animal {
    int fed;
public:
    Pig( string n) : Animal(n, "pig", "oink"), fed(0) {};
    int feed() { return ++fed; }
};

//const string & get_animal_name(const Animal & a){
  // Since this fn is a fiend of Animal base class it can access all
  // the private members(data and fns) in the Animal class.
  //
  // However, friends undermine the c++ philosophy, so better to use
  // accessor fns.
//  return a._name;
//}
const string & get_animal_name(const Animal & a){
  return a.name();
}

int main( int argc, char ** argv ) {
    Dog d("Rover");
    Cat c("Fluffy");
    Pig p("Arnold");
    
    d.speak();
    c.speak();
    p.speak();
    
    printf("the dog has been walked %d times\n", d.walk());
    printf("the cat has been petted %d times\n", c.pet());
    printf("the pig has been fed %d times\n", p.feed());
    printf("the pig is named %s\n", get_animal_name(p).c_str());
}
