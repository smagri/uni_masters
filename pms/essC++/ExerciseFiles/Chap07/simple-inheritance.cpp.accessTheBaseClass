// simple-inheritance.cpp by Bill Weinman <http://bw.org/>
#include <cstdio>
#include <string>
using namespace std;

// Accessing member data and fns of a base class from a derived class.
//
// This code shows accessing private data from a Base class in the
// Derived class.

// Base class
class Animal {
  // _name...underscore name, by convention, indicates private member data.
  string _name;
  string _type;
  string _sound;
  // private constructor prevents construction of base class
  Animal(){};
protected:
    // protected constructor for use by derived classes
  Animal ( const string & n, const string & t, const string & s )
    : _name(n), _type(t), _sound(s) {}
public:
  void speak() const;
  const string & name() const { return _name; }
  const string & type() const { return _type; }
  const string & sound() const { return _sound; }
};

void Animal::speak() const {
    printf("%s the %s says %s\n", _name.c_str(), _type.c_str(), _sound.c_str());
}

// Dog class - derived from Animal
class Dog : public Animal {
    int walked;
public:
    Dog( string n ) : Animal(n, "dog", "woof"), walked(0) {};
    int walk() { return ++walked; }
};

// Cat class - derived from Animal
class Cat : public Animal {
    int petted;
public:
    Cat( string n ) : Animal(n, "cat", "meow"), petted(0) {};
    int pet() { return ++petted; }
};

// Pig class - derived from Animal
class Pig : public Animal {
  // Pig class derived from base class Animal.
  int fed;
public:
  Pig( string n) : Animal(n, "pig", "oink"), fed(0) {};
  int feed() { return ++fed; }
  string latin() const;
};

string Pig::latin() const{
  // name method is a member of the base class, Animal
  //
  // Pig is derived class from Animal class which is the base class.
  //return name() + "-ay"; OR:
  // not really needed here as name() does not exist in the derived class also.

  // name() member fn is required as the _name member data of the base
  // class Animal is private => only accessable by Animal class member
  // fns.
  //
  // Could give _name protected access so it's directly accessable by
  // this Pig derived class.  But this is not considered best
  // practice, use accessor fn instead, as it's best to leave the
  // access control in the base class.
  //
  //
  // This code shows accessing private data from a Base class in the
  // Derived class.  Pig is a derived class from the base class
  // Animal...due to class::Pig : public Animal{...
  return Animal::name() + "-ay";

}

int main( int argc, char ** argv ) {
    Dog d("Rover");
    Cat c("Fluffy");
    Pig p("Arnold");
    
    d.speak();
    c.speak();
    p.speak();
    
    printf("the dog has been walked %d times\n", d.walk());
    printf("the cat has been petted %d times\n", c.pet());
    printf("the pig has been fed %d times\n", p.feed());

    // since p.latin() returns a c++ str, c_str() gives you a c style
    // string you can use with %s
    printf("The pig is sometimes called %s\n", p.latin().c_str());
}
