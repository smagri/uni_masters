#include <vector>
#include <random>
#include <iostream>
#include <chrono>

using namespace std;

//
// task 1: STL Vector Operations
//

// @end modify the code to use integers instead.

int fn1(vector<double> &randomNumVec){
  // Populate vector with a random number from a uniform distribution.
  //
  // In a uniform distribution values are in the range a<=x<b, ie
  // [a,b).  More specifically this is 0<=x<10 for this code.
  //
  // Construct a trivial random generator engine from a time-based
  // seed.  All <random> library functions need a seed.  And generate
  // pseudo random numbers.
  //
  // As an alternative trivial random numbers can also be generated
  // using cstdlib funs rand and srand.
  //
  unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
  std::default_random_engine generator (seed);
  
  std::uniform_real_distribution<double> distributionUniform(0.0, 10.0);

  cout << "in fn1()" << endl;
  cout << "size() = " << randomNumVec.size() << endl;

  // Fill the vector with 10 values.
  int i;
  cout << "Random Numbers, for a Uniform distribution:" << endl;
  for (i=0; i<10; i++){
    randomNumVec.push_back( distributionUniform(generator) );
    cout << "randomNumVec.at(" << i << ")=" << randomNumVec.at(i) << endl;
  }
  
  
  // Populate vector with a random number from a normal(aka guassian)
  // distributions, which has mean=8 and std deviation=4.
  //
  //unsigned seed = std::chrono::system_clock::now().time_since_epoch().count();
  //std::default_random_engine generator (seed);

  std::normal_distribution<double> distributionGaussian(8.0, 4.0);

  cout << "Random Numbers, for a Gaussian, or normal, distribution:" << endl;
  for (i=10; i<20; i++){
    randomNumVec.push_back( distributionGaussian(generator) );
    cout << "randomNumVec.at(" << i << ")=" << randomNumVec.at(i) << endl;
  }
  return 0;
    
};



int fn2(vector<double> &randomNumVec){
  // Rearange vector elements using the bubble sort algorithm.

   return 0;
  
};



int main(int argc, char ** argv){

  
  vector<double> randomNumVec;

  // Pass by reference => modifies main's copy within the given
  // function.
  //
  fn1(randomNumVec);

  cout << "btw fn1() and fn2() call" << endl;
  
  fn2(randomNumVec);

  return 0;
  
};


