// Generated by gencpp from file lama_msgs/GetLamaObjectResponse.msg
// DO NOT EDIT!


#ifndef LAMA_MSGS_MESSAGE_GETLAMAOBJECTRESPONSE_H
#define LAMA_MSGS_MESSAGE_GETLAMAOBJECTRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <lama_msgs/LamaObject.h>

namespace lama_msgs
{
template <class ContainerAllocator>
struct GetLamaObjectResponse_
{
  typedef GetLamaObjectResponse_<ContainerAllocator> Type;

  GetLamaObjectResponse_()
    : object()  {
    }
  GetLamaObjectResponse_(const ContainerAllocator& _alloc)
    : object(_alloc)  {
    }



   typedef  ::lama_msgs::LamaObject_<ContainerAllocator>  _object_type;
  _object_type object;




  typedef boost::shared_ptr< ::lama_msgs::GetLamaObjectResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lama_msgs::GetLamaObjectResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetLamaObjectResponse_

typedef ::lama_msgs::GetLamaObjectResponse_<std::allocator<void> > GetLamaObjectResponse;

typedef boost::shared_ptr< ::lama_msgs::GetLamaObjectResponse > GetLamaObjectResponsePtr;
typedef boost::shared_ptr< ::lama_msgs::GetLamaObjectResponse const> GetLamaObjectResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lama_msgs::GetLamaObjectResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lama_msgs::GetLamaObjectResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lama_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'lama_msgs': ['/lu1/smagri/uni/subj/proj30cp/catkin_ws/src/lama_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lama_msgs::GetLamaObjectResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lama_msgs::GetLamaObjectResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lama_msgs::GetLamaObjectResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lama_msgs::GetLamaObjectResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lama_msgs::GetLamaObjectResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lama_msgs::GetLamaObjectResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lama_msgs::GetLamaObjectResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eea5eb07a771e62f930c7318a67ee584";
  }

  static const char* value(const ::lama_msgs::GetLamaObjectResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeea5eb07a771e62fULL;
  static const uint64_t static_value2 = 0x930c7318a67ee584ULL;
};

template<class ContainerAllocator>
struct DataType< ::lama_msgs::GetLamaObjectResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lama_msgs/GetLamaObjectResponse";
  }

  static const char* value(const ::lama_msgs::GetLamaObjectResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lama_msgs::GetLamaObjectResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "LamaObject object\n\
\n\
\n\
================================================================================\n\
MSG: lama_msgs/LamaObject\n\
# id of lama object in the database, will be unique.\n\
# When adding a vertex into the database, this id will be ignored.\n\
int32 id\n\
\n\
# id of lama object in the world (usage is implementation specific).\n\
int32 id_in_world\n\
\n\
# name of object\n\
string name\n\
\n\
# emitter id and name.\n\
int32 emitter_id\n\
string emitter_name\n\
\n\
# type: \"EDGE\" or \"VERTEX\"\n\
int32 type\n\
int32 VERTEX = 1\n\
int32 EDGE = 2\n\
\n\
# for edges: start and end vertices\n\
# for vertices: not used\n\
int32[2] references\n\
\n\
";
  }

  static const char* value(const ::lama_msgs::GetLamaObjectResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lama_msgs::GetLamaObjectResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct GetLamaObjectResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lama_msgs::GetLamaObjectResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lama_msgs::GetLamaObjectResponse_<ContainerAllocator>& v)
  {
    s << indent << "object: ";
    s << std::endl;
    Printer< ::lama_msgs::LamaObject_<ContainerAllocator> >::stream(s, indent + "  ", v.object);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LAMA_MSGS_MESSAGE_GETLAMAOBJECTRESPONSE_H
