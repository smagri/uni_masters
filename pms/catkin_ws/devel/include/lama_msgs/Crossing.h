// Generated by gencpp from file lama_msgs/Crossing.msg
// DO NOT EDIT!


#ifndef LAMA_MSGS_MESSAGE_CROSSING_H
#define LAMA_MSGS_MESSAGE_CROSSING_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <lama_msgs/Frontier.h>

namespace lama_msgs
{
template <class ContainerAllocator>
struct Crossing_
{
  typedef Crossing_<ContainerAllocator> Type;

  Crossing_()
    : center()
    , radius(0.0)
    , max_range(0.0)
    , frontiers()  {
    }
  Crossing_(const ContainerAllocator& _alloc)
    : center(_alloc)
    , radius(0.0)
    , max_range(0.0)
    , frontiers(_alloc)  {
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _center_type;
  _center_type center;

   typedef float _radius_type;
  _radius_type radius;

   typedef float _max_range_type;
  _max_range_type max_range;

   typedef std::vector< ::lama_msgs::Frontier_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::lama_msgs::Frontier_<ContainerAllocator> >::other >  _frontiers_type;
  _frontiers_type frontiers;




  typedef boost::shared_ptr< ::lama_msgs::Crossing_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lama_msgs::Crossing_<ContainerAllocator> const> ConstPtr;

}; // struct Crossing_

typedef ::lama_msgs::Crossing_<std::allocator<void> > Crossing;

typedef boost::shared_ptr< ::lama_msgs::Crossing > CrossingPtr;
typedef boost::shared_ptr< ::lama_msgs::Crossing const> CrossingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lama_msgs::Crossing_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lama_msgs::Crossing_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace lama_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'lama_msgs': ['/lu1/smagri/uni/subj/proj30cp/catkin_ws/src/lama_msgs/msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::lama_msgs::Crossing_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lama_msgs::Crossing_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lama_msgs::Crossing_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lama_msgs::Crossing_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lama_msgs::Crossing_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lama_msgs::Crossing_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lama_msgs::Crossing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "67addd09c3278311b7859a9f2670cdb2";
  }

  static const char* value(const ::lama_msgs::Crossing_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x67addd09c3278311ULL;
  static const uint64_t static_value2 = 0xb7859a9f2670cdb2ULL;
};

template<class ContainerAllocator>
struct DataType< ::lama_msgs::Crossing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lama_msgs/Crossing";
  }

  static const char* value(const ::lama_msgs::Crossing_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lama_msgs::Crossing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The main aim of a crossing is to store frontier information.\n\
\n\
# Crossing center.\n\
geometry_msgs/Point center\n\
\n\
# Crossing radius.\n\
float32 radius\n\
\n\
# Max. range of the data used to compute the crossing.\n\
float32 max_range\n\
\n\
Frontier[] frontiers\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: lama_msgs/Frontier\n\
# Frontier is a line segment through which a robot can go.\n\
\n\
# First point\n\
geometry_msgs/Point p1\n\
\n\
# Second point, so that angle(r-p1, r-p2) is positive, where r is crossing center.\n\
geometry_msgs/Point p2\n\
\n\
# Segment length, i.e. width of free space\n\
float32 width\n\
\n\
# Angle between x-axis and line between origin and frontier middle. Where x-axis\n\
# and origin refer to the data from which the frontier is computed, in general a LaserScan.\n\
float32 angle\n\
";
  }

  static const char* value(const ::lama_msgs::Crossing_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lama_msgs::Crossing_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.center);
      stream.next(m.radius);
      stream.next(m.max_range);
      stream.next(m.frontiers);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Crossing_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lama_msgs::Crossing_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lama_msgs::Crossing_<ContainerAllocator>& v)
  {
    s << indent << "center: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
    s << indent << "radius: ";
    Printer<float>::stream(s, indent + "  ", v.radius);
    s << indent << "max_range: ";
    Printer<float>::stream(s, indent + "  ", v.max_range);
    s << indent << "frontiers[]" << std::endl;
    for (size_t i = 0; i < v.frontiers.size(); ++i)
    {
      s << indent << "  frontiers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lama_msgs::Frontier_<ContainerAllocator> >::stream(s, indent + "    ", v.frontiers[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LAMA_MSGS_MESSAGE_CROSSING_H
