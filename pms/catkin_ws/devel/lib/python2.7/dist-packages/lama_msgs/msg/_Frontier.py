# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lama_msgs/Frontier.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Frontier(genpy.Message):
  _md5sum = "626f51fb9d901b07427079891bd87ce3"
  _type = "lama_msgs/Frontier"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Frontier is a line segment through which a robot can go.

# First point
geometry_msgs/Point p1

# Second point, so that angle(r-p1, r-p2) is positive, where r is crossing center.
geometry_msgs/Point p2

# Segment length, i.e. width of free space
float32 width

# Angle between x-axis and line between origin and frontier middle. Where x-axis
# and origin refer to the data from which the frontier is computed, in general a LaserScan.
float32 angle

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

"""
  __slots__ = ['p1','p2','width','angle']
  _slot_types = ['geometry_msgs/Point','geometry_msgs/Point','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       p1,p2,width,angle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Frontier, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.p1 is None:
        self.p1 = geometry_msgs.msg.Point()
      if self.p2 is None:
        self.p2 = geometry_msgs.msg.Point()
      if self.width is None:
        self.width = 0.
      if self.angle is None:
        self.angle = 0.
    else:
      self.p1 = geometry_msgs.msg.Point()
      self.p2 = geometry_msgs.msg.Point()
      self.width = 0.
      self.angle = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6d2f.pack(_x.p1.x, _x.p1.y, _x.p1.z, _x.p2.x, _x.p2.y, _x.p2.z, _x.width, _x.angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.p1 is None:
        self.p1 = geometry_msgs.msg.Point()
      if self.p2 is None:
        self.p2 = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.p1.x, _x.p1.y, _x.p1.z, _x.p2.x, _x.p2.y, _x.p2.z, _x.width, _x.angle,) = _struct_6d2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6d2f.pack(_x.p1.x, _x.p1.y, _x.p1.z, _x.p2.x, _x.p2.y, _x.p2.z, _x.width, _x.angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.p1 is None:
        self.p1 = geometry_msgs.msg.Point()
      if self.p2 is None:
        self.p2 = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.p1.x, _x.p1.y, _x.p1.z, _x.p2.x, _x.p2.y, _x.p2.z, _x.width, _x.angle,) = _struct_6d2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6d2f = struct.Struct("<6d2f")
