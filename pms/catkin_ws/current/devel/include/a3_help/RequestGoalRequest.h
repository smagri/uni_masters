// Generated by gencpp from file a3_help/RequestGoalRequest.msg
// DO NOT EDIT!


#ifndef A3_HELP_MESSAGE_REQUESTGOALREQUEST_H
#define A3_HELP_MESSAGE_REQUESTGOALREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace a3_help
{
template <class ContainerAllocator>
struct RequestGoalRequest_
{
  typedef RequestGoalRequest_<ContainerAllocator> Type;

  RequestGoalRequest_()
    : x(0.0)
    , y(0.0)
    , angle(0.0)
    , scanTime(0.0)  {
    }
  RequestGoalRequest_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , angle(0.0)
    , scanTime(0.0)  {
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _angle_type;
  _angle_type angle;

   typedef double _scanTime_type;
  _scanTime_type scanTime;




  typedef boost::shared_ptr< ::a3_help::RequestGoalRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::a3_help::RequestGoalRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RequestGoalRequest_

typedef ::a3_help::RequestGoalRequest_<std::allocator<void> > RequestGoalRequest;

typedef boost::shared_ptr< ::a3_help::RequestGoalRequest > RequestGoalRequestPtr;
typedef boost::shared_ptr< ::a3_help::RequestGoalRequest const> RequestGoalRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::a3_help::RequestGoalRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::a3_help::RequestGoalRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace a3_help

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/indigo/share/sensor_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::a3_help::RequestGoalRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::a3_help::RequestGoalRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::a3_help::RequestGoalRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::a3_help::RequestGoalRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::a3_help::RequestGoalRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::a3_help::RequestGoalRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::a3_help::RequestGoalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2520647da40e4c13f11ae535688acfad";
  }

  static const char* value(const ::a3_help::RequestGoalRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2520647da40e4c13ULL;
  static const uint64_t static_value2 = 0xf11ae535688acfadULL;
};

template<class ContainerAllocator>
struct DataType< ::a3_help::RequestGoalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a3_help/RequestGoalRequest";
  }

  static const char* value(const ::a3_help::RequestGoalRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::a3_help::RequestGoalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n\
float64 y\n\
float64 angle\n\
float64 scanTime\n\
";
  }

  static const char* value(const ::a3_help::RequestGoalRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::a3_help::RequestGoalRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.angle);
      stream.next(m.scanTime);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct RequestGoalRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::a3_help::RequestGoalRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::a3_help::RequestGoalRequest_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "scanTime: ";
    Printer<double>::stream(s, indent + "  ", v.scanTime);
  }
};

} // namespace message_operations
} // namespace ros

#endif // A3_HELP_MESSAGE_REQUESTGOALREQUEST_H
